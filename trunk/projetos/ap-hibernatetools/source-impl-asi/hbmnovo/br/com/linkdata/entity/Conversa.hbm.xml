<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC 
	"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
	"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<!-- Generated 19/01/2010 11:40:23 by Hibernate Tools 3.2.5.Beta -->
<hibernate-mapping>

<class
    name="br.com.linkdata.entity.Conversa"
    table="CONVERSA"
>
  <meta attribute="class-code" inherit="false">
	/**
	 * Adiciona uma mensagem.
	 * @param mensagem Mensagem
	 */
	public void addMensagem(Mensagem mensagem){
		if (mensagens == null) {
			mensagens = new ArrayList<Mensagem>();
		}
		setDataUltimaMensagem(mensagem.getData());
		mensagens.add(mensagem);
	}
	
	/**
	 * Adiciona um envolvido.
	 * @param envolvido Envolvido
	 */
	public void addEnvolvidos(Envolvido envolvido){
		if (envolvidos == null) {
			envolvidos = new HashSet<Envolvido>();
		}
		envolvidos.add(envolvido);
	}
	
	@Transient
	public List<Envolvido> getDestinatariosUltimaMensagem(Usuario usuario) {
		List<Envolvido> envolvidos = new ArrayList<Envolvido>();
		
		for (Envolvido envolvido : getEnvolvidos()) {
			if( ! envolvido.getUsuario().getId().equals(usuario.getId())){
				envolvidos.add(envolvido);
			}
		}
		return envolvidos;		
	}
	
	@Transient
	public Mensagem getUltimaMensagem() {
	  if (mensagens!=null) {
	    return mensagens.get(mensagens.size()-1);
	  }
	  return null;
	}
	</meta>
  <meta attribute="extra-import" inherit="false">javax.persistence.Transient</meta>

	<id 
        name="id"
        type="java.lang.Long"
        access="field"
    >
  <meta attribute="class-code" inherit="false"></meta>
  <meta attribute="extra-import" inherit="false"></meta>
    
<column name="ID_CONVERSA" precision="12" scale="0" />
	    <generator class="sequence">
            <param name="max_lo">49</param>
            <param name="sequence">SQ_CONVERSA</param>
		</generator>
    </id>




    <property
        name="assunto"
	    type="java.lang.String"
        access="field"
    >
  <meta attribute="class-code" inherit="false">
	/**
	 * Adiciona uma mensagem.
	 * @param mensagem Mensagem
	 */
	public void addMensagem(Mensagem mensagem){
		if (mensagens == null) {
			mensagens = new ArrayList<Mensagem>();
		}
		setDataUltimaMensagem(mensagem.getData());
		mensagens.add(mensagem);
	}
	
	/**
	 * Adiciona um envolvido.
	 * @param envolvido Envolvido
	 */
	public void addEnvolvidos(Envolvido envolvido){
		if (envolvidos == null) {
			envolvidos = new HashSet<Envolvido>();
		}
		envolvidos.add(envolvido);
	}
	
	@Transient
	public List<Envolvido> getDestinatariosUltimaMensagem(Usuario usuario) {
		List<Envolvido> envolvidos = new ArrayList<Envolvido>();
		
		for (Envolvido envolvido : getEnvolvidos()) {
			if( ! envolvido.getUsuario().getId().equals(usuario.getId())){
				envolvidos.add(envolvido);
			}
		}
		return envolvidos;		
	}
	
	@Transient
	public Mensagem getUltimaMensagem() {
	  if (mensagens!=null) {
	    return mensagens.get(mensagens.size()-1);
	  }
	  return null;
	}
	</meta>
  <meta attribute="extra-import" inherit="false">javax.persistence.Transient</meta>
<column name="ASSUNTO" not-null="true" />
  </property>

    <property
        name="dataUltimaMensagem"
	    type="timestamp"
        access="field"
    >
  <meta attribute="class-code" inherit="false">
	/**
	 * Adiciona uma mensagem.
	 * @param mensagem Mensagem
	 */
	public void addMensagem(Mensagem mensagem){
		if (mensagens == null) {
			mensagens = new ArrayList<Mensagem>();
		}
		setDataUltimaMensagem(mensagem.getData());
		mensagens.add(mensagem);
	}
	
	/**
	 * Adiciona um envolvido.
	 * @param envolvido Envolvido
	 */
	public void addEnvolvidos(Envolvido envolvido){
		if (envolvidos == null) {
			envolvidos = new HashSet<Envolvido>();
		}
		envolvidos.add(envolvido);
	}
	
	@Transient
	public List<Envolvido> getDestinatariosUltimaMensagem(Usuario usuario) {
		List<Envolvido> envolvidos = new ArrayList<Envolvido>();
		
		for (Envolvido envolvido : getEnvolvidos()) {
			if( ! envolvido.getUsuario().getId().equals(usuario.getId())){
				envolvidos.add(envolvido);
			}
		}
		return envolvidos;		
	}
	
	@Transient
	public Mensagem getUltimaMensagem() {
	  if (mensagens!=null) {
	    return mensagens.get(mensagens.size()-1);
	  }
	  return null;
	}
	</meta>
  <meta attribute="extra-import" inherit="false">javax.persistence.Transient</meta>
<column name="DT_ULTIMA_MENSAGEM" not-null="true" />
  </property>


	<set name="envolvidos" 
	inverse="true"
	lazy="true" 
	table="ENVOLVIDO_CONVERSA"
	 fetch="select"
	>
  <meta attribute="class-code" inherit="false">
	/**
	 * Adiciona uma mensagem.
	 * @param mensagem Mensagem
	 */
	public void addMensagem(Mensagem mensagem){
		if (mensagens == null) {
			mensagens = new ArrayList<Mensagem>();
		}
		setDataUltimaMensagem(mensagem.getData());
		mensagens.add(mensagem);
	}
	
	/**
	 * Adiciona um envolvido.
	 * @param envolvido Envolvido
	 */
	public void addEnvolvidos(Envolvido envolvido){
		if (envolvidos == null) {
			envolvidos = new HashSet<Envolvido>();
		}
		envolvidos.add(envolvido);
	}
	
	@Transient
	public List<Envolvido> getDestinatariosUltimaMensagem(Usuario usuario) {
		List<Envolvido> envolvidos = new ArrayList<Envolvido>();
		
		for (Envolvido envolvido : getEnvolvidos()) {
			if( ! envolvido.getUsuario().getId().equals(usuario.getId())){
				envolvidos.add(envolvido);
			}
		}
		return envolvidos;		
	}
	
	@Transient
	public Mensagem getUltimaMensagem() {
	  if (mensagens!=null) {
	    return mensagens.get(mensagens.size()-1);
	  }
	  return null;
	}
	</meta>
  <meta attribute="extra-import" inherit="false">javax.persistence.Transient</meta>
		<key
		> 
<column name="ID_CONVERSA" />
		</key>
<one-to-many class="br.com.linkdata.entity.Envolvido"
/>
	</set>

	<list name="mensagens" inverse="false" table="MENSAGEM"
	lazy="true"
        cascade="persist,merge,delete"
	 fetch="select">
  <meta attribute="class-code" inherit="false">
	/**
	 * Adiciona uma mensagem.
	 * @param mensagem Mensagem
	 */
	public void addMensagem(Mensagem mensagem){
		if (mensagens == null) {
			mensagens = new ArrayList<Mensagem>();
		}
		setDataUltimaMensagem(mensagem.getData());
		mensagens.add(mensagem);
	}
	
	/**
	 * Adiciona um envolvido.
	 * @param envolvido Envolvido
	 */
	public void addEnvolvidos(Envolvido envolvido){
		if (envolvidos == null) {
			envolvidos = new HashSet<Envolvido>();
		}
		envolvidos.add(envolvido);
	}
	
	@Transient
	public List<Envolvido> getDestinatariosUltimaMensagem(Usuario usuario) {
		List<Envolvido> envolvidos = new ArrayList<Envolvido>();
		
		for (Envolvido envolvido : getEnvolvidos()) {
			if( ! envolvido.getUsuario().getId().equals(usuario.getId())){
				envolvidos.add(envolvido);
			}
		}
		return envolvidos;		
	}
	
	@Transient
	public Mensagem getUltimaMensagem() {
	  if (mensagens!=null) {
	    return mensagens.get(mensagens.size()-1);
	  }
	  return null;
	}
	</meta>
  <meta attribute="extra-import" inherit="false">javax.persistence.Transient</meta>
		<key
		> 
<column name="ID_CONVERSA" />
		</key>
    		<index 
    			column="NR_ORDEM"
			/>
<one-to-many class="br.com.linkdata.entity.Mensagem"
/>
	</list>


    <many-to-one
	    name="prioridade"
	    class="br.com.linkdata.entity.Prioridade"
	    
        access="field"
        fetch="join"
    >
  <meta attribute="class-code" inherit="false">
	/**
	 * Adiciona uma mensagem.
	 * @param mensagem Mensagem
	 */
	public void addMensagem(Mensagem mensagem){
		if (mensagens == null) {
			mensagens = new ArrayList<Mensagem>();
		}
		setDataUltimaMensagem(mensagem.getData());
		mensagens.add(mensagem);
	}
	
	/**
	 * Adiciona um envolvido.
	 * @param envolvido Envolvido
	 */
	public void addEnvolvidos(Envolvido envolvido){
		if (envolvidos == null) {
			envolvidos = new HashSet<Envolvido>();
		}
		envolvidos.add(envolvido);
	}
	
	@Transient
	public List<Envolvido> getDestinatariosUltimaMensagem(Usuario usuario) {
		List<Envolvido> envolvidos = new ArrayList<Envolvido>();
		
		for (Envolvido envolvido : getEnvolvidos()) {
			if( ! envolvido.getUsuario().getId().equals(usuario.getId())){
				envolvidos.add(envolvido);
			}
		}
		return envolvidos;		
	}
	
	@Transient
	public Mensagem getUltimaMensagem() {
	  if (mensagens!=null) {
	    return mensagens.get(mensagens.size()-1);
	  }
	  return null;
	}
	</meta>
  <meta attribute="extra-import" inherit="false">javax.persistence.Transient</meta>
<column name="ID_PRIORIDADE" />
   </many-to-one>
    <property
        name="processInstanceId"
	    type="java.lang.Long"
        access="field"
    >
  <meta attribute="class-code" inherit="false">
	/**
	 * Adiciona uma mensagem.
	 * @param mensagem Mensagem
	 */
	public void addMensagem(Mensagem mensagem){
		if (mensagens == null) {
			mensagens = new ArrayList<Mensagem>();
		}
		setDataUltimaMensagem(mensagem.getData());
		mensagens.add(mensagem);
	}
	
	/**
	 * Adiciona um envolvido.
	 * @param envolvido Envolvido
	 */
	public void addEnvolvidos(Envolvido envolvido){
		if (envolvidos == null) {
			envolvidos = new HashSet<Envolvido>();
		}
		envolvidos.add(envolvido);
	}
	
	@Transient
	public List<Envolvido> getDestinatariosUltimaMensagem(Usuario usuario) {
		List<Envolvido> envolvidos = new ArrayList<Envolvido>();
		
		for (Envolvido envolvido : getEnvolvidos()) {
			if( ! envolvido.getUsuario().getId().equals(usuario.getId())){
				envolvidos.add(envolvido);
			}
		}
		return envolvidos;		
	}
	
	@Transient
	public Mensagem getUltimaMensagem() {
	  if (mensagens!=null) {
	    return mensagens.get(mensagens.size()-1);
	  }
	  return null;
	}
	</meta>
  <meta attribute="extra-import" inherit="false">javax.persistence.Transient</meta>
<column name="ID_PROCESS_INSTANCE" precision="12" scale="0" />
  </property>

    <property
        name="taskId"
	    type="java.lang.Long"
        access="field"
    >
  <meta attribute="class-code" inherit="false">
	/**
	 * Adiciona uma mensagem.
	 * @param mensagem Mensagem
	 */
	public void addMensagem(Mensagem mensagem){
		if (mensagens == null) {
			mensagens = new ArrayList<Mensagem>();
		}
		setDataUltimaMensagem(mensagem.getData());
		mensagens.add(mensagem);
	}
	
	/**
	 * Adiciona um envolvido.
	 * @param envolvido Envolvido
	 */
	public void addEnvolvidos(Envolvido envolvido){
		if (envolvidos == null) {
			envolvidos = new HashSet<Envolvido>();
		}
		envolvidos.add(envolvido);
	}
	
	@Transient
	public List<Envolvido> getDestinatariosUltimaMensagem(Usuario usuario) {
		List<Envolvido> envolvidos = new ArrayList<Envolvido>();
		
		for (Envolvido envolvido : getEnvolvidos()) {
			if( ! envolvido.getUsuario().getId().equals(usuario.getId())){
				envolvidos.add(envolvido);
			}
		}
		return envolvidos;		
	}
	
	@Transient
	public Mensagem getUltimaMensagem() {
	  if (mensagens!=null) {
	    return mensagens.get(mensagens.size()-1);
	  }
	  return null;
	}
	</meta>
  <meta attribute="extra-import" inherit="false">javax.persistence.Transient</meta>
<column name="ID_TASK" precision="12" scale="0" />
  </property>

    <property
        name="taskIdDestino"
	    type="java.lang.Long"
        access="field"
    >
  <meta attribute="class-code" inherit="false">
	/**
	 * Adiciona uma mensagem.
	 * @param mensagem Mensagem
	 */
	public void addMensagem(Mensagem mensagem){
		if (mensagens == null) {
			mensagens = new ArrayList<Mensagem>();
		}
		setDataUltimaMensagem(mensagem.getData());
		mensagens.add(mensagem);
	}
	
	/**
	 * Adiciona um envolvido.
	 * @param envolvido Envolvido
	 */
	public void addEnvolvidos(Envolvido envolvido){
		if (envolvidos == null) {
			envolvidos = new HashSet<Envolvido>();
		}
		envolvidos.add(envolvido);
	}
	
	@Transient
	public List<Envolvido> getDestinatariosUltimaMensagem(Usuario usuario) {
		List<Envolvido> envolvidos = new ArrayList<Envolvido>();
		
		for (Envolvido envolvido : getEnvolvidos()) {
			if( ! envolvido.getUsuario().getId().equals(usuario.getId())){
				envolvidos.add(envolvido);
			}
		}
		return envolvidos;		
	}
	
	@Transient
	public Mensagem getUltimaMensagem() {
	  if (mensagens!=null) {
	    return mensagens.get(mensagens.size()-1);
	  }
	  return null;
	}
	</meta>
  <meta attribute="extra-import" inherit="false">javax.persistence.Transient</meta>
<column name="ID_TASK_DESTINO" precision="12" scale="0" />
  </property>

    <many-to-one
	    name="tipoConversa"
	    class="br.com.linkdata.entity.TipoConversa"
	    
        access="field"
        fetch="join"
    >
  <meta attribute="class-code" inherit="false">
	/**
	 * Adiciona uma mensagem.
	 * @param mensagem Mensagem
	 */
	public void addMensagem(Mensagem mensagem){
		if (mensagens == null) {
			mensagens = new ArrayList<Mensagem>();
		}
		setDataUltimaMensagem(mensagem.getData());
		mensagens.add(mensagem);
	}
	
	/**
	 * Adiciona um envolvido.
	 * @param envolvido Envolvido
	 */
	public void addEnvolvidos(Envolvido envolvido){
		if (envolvidos == null) {
			envolvidos = new HashSet<Envolvido>();
		}
		envolvidos.add(envolvido);
	}
	
	@Transient
	public List<Envolvido> getDestinatariosUltimaMensagem(Usuario usuario) {
		List<Envolvido> envolvidos = new ArrayList<Envolvido>();
		
		for (Envolvido envolvido : getEnvolvidos()) {
			if( ! envolvido.getUsuario().getId().equals(usuario.getId())){
				envolvidos.add(envolvido);
			}
		}
		return envolvidos;		
	}
	
	@Transient
	public Mensagem getUltimaMensagem() {
	  if (mensagens!=null) {
	    return mensagens.get(mensagens.size()-1);
	  }
	  return null;
	}
	</meta>
  <meta attribute="extra-import" inherit="false">javax.persistence.Transient</meta>
<column name="ID_TIPO_CONVERSA" />
   </many-to-one>

</class>

</hibernate-mapping>