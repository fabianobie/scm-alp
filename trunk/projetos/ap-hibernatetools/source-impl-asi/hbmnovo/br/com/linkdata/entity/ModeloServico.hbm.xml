<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC 
	"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
	"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<!-- Generated 19/01/2010 11:40:23 by Hibernate Tools 3.2.5.Beta -->
<hibernate-mapping>

<class
    name="br.com.linkdata.entity.ModeloServico"
    table="MODELO_SERVICO"
>
  <meta attribute="extends" inherit="false">br.com.linkdata.entity.Entity</meta>
  <meta attribute="implements" inherit="false">br.com.linkdata.entity.Duplicate<ModeloServico></meta>
  <meta attribute="class-code" inherit="false">
	public void addEstrutura(EstruturaClassificacao estrutura) {
		getEstruturas().add(estrutura);
	}

	public void removeEstrutura(EstruturaClassificacao estrutura) {
		getEstruturas().remove(estrutura);
	}

	public void addCaracteristica(ModeloCaracteristicaServico caracteristica) {
		if (modeloCaracteristicas == null) {
			modeloCaracteristicas = new LinkedHashSet<ModeloCaracteristicaServico>();
		}
		modeloCaracteristicas.add(caracteristica);
	}

	@Override
	public Object clone() {
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		ObjectOutputStream oos;
		Object deepCopy = null;
		try {
			oos = new ObjectOutputStream(baos);
			oos.writeUnshared(this);
			ByteArrayInputStream bais = new ByteArrayInputStream(baos
					.toByteArray());
			ObjectInputStream ois = new ObjectInputStream(bais);
			deepCopy = ois.readObject();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return deepCopy;
	}

	@Override
	public ModeloServico duplicate(DuplicateBag bag) {
		if (bag.fits(this)) {
			ModeloServico ms = new ModeloServico();
			bag.store(this, ms);
			ms.setSituacaoModelo(this.getSituacaoModelo().duplicate(bag));
			ms.setDescricao(this.getDescricao());
			ms.setId(this.getId());
			ms.setNome(this.getNome());
			Iterator<EstruturaClassificacao> it = this.getEstruturas()
					.iterator();
			while (it.hasNext()) {
				ms.addEstrutura(it.next().duplicate(bag));
			}
			Iterator<ModeloCaracteristicaServico> it2 = this
					.getModeloCaracteristicas().iterator();
			while (it2.hasNext()) {
				ms.addCaracteristica(it2.next().duplicate(bag));
			}
		}
		return (ModeloServico) bag.retrieve(this);

	}
	</meta>
  <meta attribute="extra-classe" inherit="false">
@DynaColumnsDomain(description = "Modelo de Serviço", column = "nome")
	</meta>
  <meta attribute="extra-import" inherit="false">java.io.ByteArrayOutputStream</meta>
  <meta attribute="extra-import" inherit="false">java.util.Iterator</meta>
  <meta attribute="extra-import" inherit="false">br.com.linkdata.dynacolumns.DynaColumnsDomain</meta>
  <meta attribute="extra-import" inherit="false">java.io.ObjectOutputStream</meta>
  <meta attribute="extra-import" inherit="false">java.io.ByteArrayInputStream</meta>
  <meta attribute="extra-import" inherit="false">java.io.ObjectInputStream</meta>
  <meta attribute="extra-import" inherit="false">java.util.LinkedHashSet</meta>

	<id 
        name="id"
        type="java.lang.Long"
        access="field"
    >
  <meta attribute="extends" inherit="false">br.com.linkdata.entity.Entity</meta>
  <meta attribute="class-code" inherit="false">
	public void addEstrutura(EstruturaClassificacao estrutura) {
		getEstruturas().add(estrutura);
	}

	public void removeEstrutura(EstruturaClassificacao estrutura) {
		getEstruturas().remove(estrutura);
	}

	public void addCaracteristica(ModeloCaracteristicaServico caracteristica) {
		if (modeloCaracteristicas == null) {
			modeloCaracteristicas = new LinkedHashSet<ModeloCaracteristicaServico>();
		}
		modeloCaracteristicas.add(caracteristica);
	}

	@Override
	public Object clone() {
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		ObjectOutputStream oos;
		Object deepCopy = null;
		try {
			oos = new ObjectOutputStream(baos);
			oos.writeUnshared(this);
			ByteArrayInputStream bais = new ByteArrayInputStream(baos
					.toByteArray());
			ObjectInputStream ois = new ObjectInputStream(bais);
			deepCopy = ois.readObject();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return deepCopy;
	}

	@Override
	public ModeloServico duplicate(DuplicateBag bag) {
		if (bag.fits(this)) {
			ModeloServico ms = new ModeloServico();
			bag.store(this, ms);
			ms.setSituacaoModelo(this.getSituacaoModelo().duplicate(bag));
			ms.setDescricao(this.getDescricao());
			ms.setId(this.getId());
			ms.setNome(this.getNome());
			Iterator<EstruturaClassificacao> it = this.getEstruturas()
					.iterator();
			while (it.hasNext()) {
				ms.addEstrutura(it.next().duplicate(bag));
			}
			Iterator<ModeloCaracteristicaServico> it2 = this
					.getModeloCaracteristicas().iterator();
			while (it2.hasNext()) {
				ms.addCaracteristica(it2.next().duplicate(bag));
			}
		}
		return (ModeloServico) bag.retrieve(this);

	}
	</meta>
  <meta attribute="implements" inherit="false">br.com.linkdata.entity.Duplicate<ModeloServico></meta>
  <meta attribute="extra-classe" inherit="false">
@DynaColumnsDomain(description = "Modelo de Serviço", column = "nome")
	</meta>
  <meta attribute="extra-import" inherit="false">java.io.ByteArrayOutputStream</meta>
  <meta attribute="extra-import" inherit="false">java.util.Iterator</meta>
  <meta attribute="extra-import" inherit="false">br.com.linkdata.dynacolumns.DynaColumnsDomain</meta>
  <meta attribute="extra-import" inherit="false">java.io.ObjectOutputStream</meta>
  <meta attribute="extra-import" inherit="false">java.io.ByteArrayInputStream</meta>
  <meta attribute="extra-import" inherit="false">java.io.ObjectInputStream</meta>
  <meta attribute="extra-import" inherit="false">java.util.LinkedHashSet</meta>
    
<column name="ID_MODELO_SERVICO" precision="12" scale="0" />
	    <generator class="sequence">
            <param name="max_lo">49</param>
            <param name="sequence">SQ_MODELO_SERVICO</param>
		</generator>
    </id>




    <property
        name="dataDesativacao"
	    type="java.util.Date"
        access="field"
    >
  <meta attribute="extends" inherit="false">br.com.linkdata.entity.Entity</meta>
  <meta attribute="class-code" inherit="false">
	public void addEstrutura(EstruturaClassificacao estrutura) {
		getEstruturas().add(estrutura);
	}

	public void removeEstrutura(EstruturaClassificacao estrutura) {
		getEstruturas().remove(estrutura);
	}

	public void addCaracteristica(ModeloCaracteristicaServico caracteristica) {
		if (modeloCaracteristicas == null) {
			modeloCaracteristicas = new LinkedHashSet<ModeloCaracteristicaServico>();
		}
		modeloCaracteristicas.add(caracteristica);
	}

	@Override
	public Object clone() {
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		ObjectOutputStream oos;
		Object deepCopy = null;
		try {
			oos = new ObjectOutputStream(baos);
			oos.writeUnshared(this);
			ByteArrayInputStream bais = new ByteArrayInputStream(baos
					.toByteArray());
			ObjectInputStream ois = new ObjectInputStream(bais);
			deepCopy = ois.readObject();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return deepCopy;
	}

	@Override
	public ModeloServico duplicate(DuplicateBag bag) {
		if (bag.fits(this)) {
			ModeloServico ms = new ModeloServico();
			bag.store(this, ms);
			ms.setSituacaoModelo(this.getSituacaoModelo().duplicate(bag));
			ms.setDescricao(this.getDescricao());
			ms.setId(this.getId());
			ms.setNome(this.getNome());
			Iterator<EstruturaClassificacao> it = this.getEstruturas()
					.iterator();
			while (it.hasNext()) {
				ms.addEstrutura(it.next().duplicate(bag));
			}
			Iterator<ModeloCaracteristicaServico> it2 = this
					.getModeloCaracteristicas().iterator();
			while (it2.hasNext()) {
				ms.addCaracteristica(it2.next().duplicate(bag));
			}
		}
		return (ModeloServico) bag.retrieve(this);

	}
	</meta>
  <meta attribute="implements" inherit="false">br.com.linkdata.entity.Duplicate<ModeloServico></meta>
  <meta attribute="extra-classe" inherit="false">
@DynaColumnsDomain(description = "Modelo de Serviço", column = "nome")
	</meta>
  <meta attribute="extra-import" inherit="false">java.io.ByteArrayOutputStream</meta>
  <meta attribute="extra-import" inherit="false">java.util.Iterator</meta>
  <meta attribute="extra-import" inherit="false">br.com.linkdata.dynacolumns.DynaColumnsDomain</meta>
  <meta attribute="extra-import" inherit="false">java.io.ObjectOutputStream</meta>
  <meta attribute="extra-import" inherit="false">java.io.ByteArrayInputStream</meta>
  <meta attribute="extra-import" inherit="false">java.io.ObjectInputStream</meta>
  <meta attribute="extra-import" inherit="false">java.util.LinkedHashSet</meta>
<column name="DT_DESATIVACAO" />
  </property>

    <property
        name="descricao"
	    type="java.lang.String"
        access="field"
    >
  <meta attribute="extends" inherit="false">br.com.linkdata.entity.Entity</meta>
  <meta attribute="class-code" inherit="false">
	public void addEstrutura(EstruturaClassificacao estrutura) {
		getEstruturas().add(estrutura);
	}

	public void removeEstrutura(EstruturaClassificacao estrutura) {
		getEstruturas().remove(estrutura);
	}

	public void addCaracteristica(ModeloCaracteristicaServico caracteristica) {
		if (modeloCaracteristicas == null) {
			modeloCaracteristicas = new LinkedHashSet<ModeloCaracteristicaServico>();
		}
		modeloCaracteristicas.add(caracteristica);
	}

	@Override
	public Object clone() {
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		ObjectOutputStream oos;
		Object deepCopy = null;
		try {
			oos = new ObjectOutputStream(baos);
			oos.writeUnshared(this);
			ByteArrayInputStream bais = new ByteArrayInputStream(baos
					.toByteArray());
			ObjectInputStream ois = new ObjectInputStream(bais);
			deepCopy = ois.readObject();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return deepCopy;
	}

	@Override
	public ModeloServico duplicate(DuplicateBag bag) {
		if (bag.fits(this)) {
			ModeloServico ms = new ModeloServico();
			bag.store(this, ms);
			ms.setSituacaoModelo(this.getSituacaoModelo().duplicate(bag));
			ms.setDescricao(this.getDescricao());
			ms.setId(this.getId());
			ms.setNome(this.getNome());
			Iterator<EstruturaClassificacao> it = this.getEstruturas()
					.iterator();
			while (it.hasNext()) {
				ms.addEstrutura(it.next().duplicate(bag));
			}
			Iterator<ModeloCaracteristicaServico> it2 = this
					.getModeloCaracteristicas().iterator();
			while (it2.hasNext()) {
				ms.addCaracteristica(it2.next().duplicate(bag));
			}
		}
		return (ModeloServico) bag.retrieve(this);

	}
	</meta>
  <meta attribute="implements" inherit="false">br.com.linkdata.entity.Duplicate<ModeloServico></meta>
  <meta attribute="extra-classe" inherit="false">
@DynaColumnsDomain(description = "Modelo de Serviço", column = "nome")
	</meta>
  <meta attribute="extra-import" inherit="false">java.io.ByteArrayOutputStream</meta>
  <meta attribute="extra-import" inherit="false">java.util.Iterator</meta>
  <meta attribute="extra-import" inherit="false">br.com.linkdata.dynacolumns.DynaColumnsDomain</meta>
  <meta attribute="extra-import" inherit="false">java.io.ObjectOutputStream</meta>
  <meta attribute="extra-import" inherit="false">java.io.ByteArrayInputStream</meta>
  <meta attribute="extra-import" inherit="false">java.io.ObjectInputStream</meta>
  <meta attribute="extra-import" inherit="false">java.util.LinkedHashSet</meta>
<column name="DS_MODELO" />
  </property>


	<set name="estruturas" 
	inverse="false"
	lazy="false" 
	table="MODELO_ESTRUTURA"
	 fetch="join"
	>
  <meta attribute="extends" inherit="false">br.com.linkdata.entity.Entity</meta>
  <meta attribute="class-code" inherit="false">
	public void addEstrutura(EstruturaClassificacao estrutura) {
		getEstruturas().add(estrutura);
	}

	public void removeEstrutura(EstruturaClassificacao estrutura) {
		getEstruturas().remove(estrutura);
	}

	public void addCaracteristica(ModeloCaracteristicaServico caracteristica) {
		if (modeloCaracteristicas == null) {
			modeloCaracteristicas = new LinkedHashSet<ModeloCaracteristicaServico>();
		}
		modeloCaracteristicas.add(caracteristica);
	}

	@Override
	public Object clone() {
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		ObjectOutputStream oos;
		Object deepCopy = null;
		try {
			oos = new ObjectOutputStream(baos);
			oos.writeUnshared(this);
			ByteArrayInputStream bais = new ByteArrayInputStream(baos
					.toByteArray());
			ObjectInputStream ois = new ObjectInputStream(bais);
			deepCopy = ois.readObject();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return deepCopy;
	}

	@Override
	public ModeloServico duplicate(DuplicateBag bag) {
		if (bag.fits(this)) {
			ModeloServico ms = new ModeloServico();
			bag.store(this, ms);
			ms.setSituacaoModelo(this.getSituacaoModelo().duplicate(bag));
			ms.setDescricao(this.getDescricao());
			ms.setId(this.getId());
			ms.setNome(this.getNome());
			Iterator<EstruturaClassificacao> it = this.getEstruturas()
					.iterator();
			while (it.hasNext()) {
				ms.addEstrutura(it.next().duplicate(bag));
			}
			Iterator<ModeloCaracteristicaServico> it2 = this
					.getModeloCaracteristicas().iterator();
			while (it2.hasNext()) {
				ms.addCaracteristica(it2.next().duplicate(bag));
			}
		}
		return (ModeloServico) bag.retrieve(this);

	}
	</meta>
  <meta attribute="implements" inherit="false">br.com.linkdata.entity.Duplicate<ModeloServico></meta>
  <meta attribute="extra-classe" inherit="false">
@DynaColumnsDomain(description = "Modelo de Serviço", column = "nome")
	</meta>
  <meta attribute="extra-import" inherit="false">java.io.ByteArrayOutputStream</meta>
  <meta attribute="extra-import" inherit="false">java.util.Iterator</meta>
  <meta attribute="extra-import" inherit="false">br.com.linkdata.dynacolumns.DynaColumnsDomain</meta>
  <meta attribute="extra-import" inherit="false">java.io.ObjectOutputStream</meta>
  <meta attribute="extra-import" inherit="false">java.io.ByteArrayInputStream</meta>
  <meta attribute="extra-import" inherit="false">java.io.ObjectInputStream</meta>
  <meta attribute="extra-import" inherit="false">java.util.LinkedHashSet</meta>
		<key
		> 
<column name="ID_MODELO_SERVICO" not-null="true" />
		</key>
<many-to-many entity-name="br.com.linkdata.entity.EstruturaClassificacao" 
>
<column name="ID_ESTR_CLASSIFICACAO" not-null="true" />
</many-to-many>
	</set>
    <property
        name="idIntegracao"
	    type="java.lang.String"
        access="field"
    >
  <meta attribute="extends" inherit="false">br.com.linkdata.entity.Entity</meta>
  <meta attribute="class-code" inherit="false">
	public void addEstrutura(EstruturaClassificacao estrutura) {
		getEstruturas().add(estrutura);
	}

	public void removeEstrutura(EstruturaClassificacao estrutura) {
		getEstruturas().remove(estrutura);
	}

	public void addCaracteristica(ModeloCaracteristicaServico caracteristica) {
		if (modeloCaracteristicas == null) {
			modeloCaracteristicas = new LinkedHashSet<ModeloCaracteristicaServico>();
		}
		modeloCaracteristicas.add(caracteristica);
	}

	@Override
	public Object clone() {
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		ObjectOutputStream oos;
		Object deepCopy = null;
		try {
			oos = new ObjectOutputStream(baos);
			oos.writeUnshared(this);
			ByteArrayInputStream bais = new ByteArrayInputStream(baos
					.toByteArray());
			ObjectInputStream ois = new ObjectInputStream(bais);
			deepCopy = ois.readObject();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return deepCopy;
	}

	@Override
	public ModeloServico duplicate(DuplicateBag bag) {
		if (bag.fits(this)) {
			ModeloServico ms = new ModeloServico();
			bag.store(this, ms);
			ms.setSituacaoModelo(this.getSituacaoModelo().duplicate(bag));
			ms.setDescricao(this.getDescricao());
			ms.setId(this.getId());
			ms.setNome(this.getNome());
			Iterator<EstruturaClassificacao> it = this.getEstruturas()
					.iterator();
			while (it.hasNext()) {
				ms.addEstrutura(it.next().duplicate(bag));
			}
			Iterator<ModeloCaracteristicaServico> it2 = this
					.getModeloCaracteristicas().iterator();
			while (it2.hasNext()) {
				ms.addCaracteristica(it2.next().duplicate(bag));
			}
		}
		return (ModeloServico) bag.retrieve(this);

	}
	</meta>
  <meta attribute="implements" inherit="false">br.com.linkdata.entity.Duplicate<ModeloServico></meta>
  <meta attribute="extra-classe" inherit="false">
@DynaColumnsDomain(description = "Modelo de Serviço", column = "nome")
	</meta>
  <meta attribute="extra-import" inherit="false">java.io.ByteArrayOutputStream</meta>
  <meta attribute="extra-import" inherit="false">java.util.Iterator</meta>
  <meta attribute="extra-import" inherit="false">br.com.linkdata.dynacolumns.DynaColumnsDomain</meta>
  <meta attribute="extra-import" inherit="false">java.io.ObjectOutputStream</meta>
  <meta attribute="extra-import" inherit="false">java.io.ByteArrayInputStream</meta>
  <meta attribute="extra-import" inherit="false">java.io.ObjectInputStream</meta>
  <meta attribute="extra-import" inherit="false">java.util.LinkedHashSet</meta>
<column name="ID_INTEGRACAO" length="10" />
  </property>


	<set name="modeloCaracteristicas" 
	inverse="false"
	lazy="false" 
	table="MODELO_CARACTERISTICA_SERV"
        cascade="persist,merge,delete"
	 fetch="join"
	>
  <meta attribute="extends" inherit="false">br.com.linkdata.entity.Entity</meta>
  <meta attribute="class-code" inherit="false">
	public void addEstrutura(EstruturaClassificacao estrutura) {
		getEstruturas().add(estrutura);
	}

	public void removeEstrutura(EstruturaClassificacao estrutura) {
		getEstruturas().remove(estrutura);
	}

	public void addCaracteristica(ModeloCaracteristicaServico caracteristica) {
		if (modeloCaracteristicas == null) {
			modeloCaracteristicas = new LinkedHashSet<ModeloCaracteristicaServico>();
		}
		modeloCaracteristicas.add(caracteristica);
	}

	@Override
	public Object clone() {
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		ObjectOutputStream oos;
		Object deepCopy = null;
		try {
			oos = new ObjectOutputStream(baos);
			oos.writeUnshared(this);
			ByteArrayInputStream bais = new ByteArrayInputStream(baos
					.toByteArray());
			ObjectInputStream ois = new ObjectInputStream(bais);
			deepCopy = ois.readObject();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return deepCopy;
	}

	@Override
	public ModeloServico duplicate(DuplicateBag bag) {
		if (bag.fits(this)) {
			ModeloServico ms = new ModeloServico();
			bag.store(this, ms);
			ms.setSituacaoModelo(this.getSituacaoModelo().duplicate(bag));
			ms.setDescricao(this.getDescricao());
			ms.setId(this.getId());
			ms.setNome(this.getNome());
			Iterator<EstruturaClassificacao> it = this.getEstruturas()
					.iterator();
			while (it.hasNext()) {
				ms.addEstrutura(it.next().duplicate(bag));
			}
			Iterator<ModeloCaracteristicaServico> it2 = this
					.getModeloCaracteristicas().iterator();
			while (it2.hasNext()) {
				ms.addCaracteristica(it2.next().duplicate(bag));
			}
		}
		return (ModeloServico) bag.retrieve(this);

	}
	</meta>
  <meta attribute="implements" inherit="false">br.com.linkdata.entity.Duplicate<ModeloServico></meta>
  <meta attribute="extra-classe" inherit="false">
@DynaColumnsDomain(description = "Modelo de Serviço", column = "nome")
	</meta>
  <meta attribute="extra-import" inherit="false">java.io.ByteArrayOutputStream</meta>
  <meta attribute="extra-import" inherit="false">java.util.Iterator</meta>
  <meta attribute="extra-import" inherit="false">br.com.linkdata.dynacolumns.DynaColumnsDomain</meta>
  <meta attribute="extra-import" inherit="false">java.io.ObjectOutputStream</meta>
  <meta attribute="extra-import" inherit="false">java.io.ByteArrayInputStream</meta>
  <meta attribute="extra-import" inherit="false">java.io.ObjectInputStream</meta>
  <meta attribute="extra-import" inherit="false">java.util.LinkedHashSet</meta>
		<key
		> 
<column name="ID_MODELO_SERVICO" />
		</key>
<one-to-many class="br.com.linkdata.entity.ModeloCaracteristicaServico"
/>
	</set>
    <property
        name="nome"
	    type="java.lang.String"
        access="field"
    >
  <meta attribute="extends" inherit="false">br.com.linkdata.entity.Entity</meta>
  <meta attribute="class-code" inherit="false">
	public void addEstrutura(EstruturaClassificacao estrutura) {
		getEstruturas().add(estrutura);
	}

	public void removeEstrutura(EstruturaClassificacao estrutura) {
		getEstruturas().remove(estrutura);
	}

	public void addCaracteristica(ModeloCaracteristicaServico caracteristica) {
		if (modeloCaracteristicas == null) {
			modeloCaracteristicas = new LinkedHashSet<ModeloCaracteristicaServico>();
		}
		modeloCaracteristicas.add(caracteristica);
	}

	@Override
	public Object clone() {
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		ObjectOutputStream oos;
		Object deepCopy = null;
		try {
			oos = new ObjectOutputStream(baos);
			oos.writeUnshared(this);
			ByteArrayInputStream bais = new ByteArrayInputStream(baos
					.toByteArray());
			ObjectInputStream ois = new ObjectInputStream(bais);
			deepCopy = ois.readObject();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return deepCopy;
	}

	@Override
	public ModeloServico duplicate(DuplicateBag bag) {
		if (bag.fits(this)) {
			ModeloServico ms = new ModeloServico();
			bag.store(this, ms);
			ms.setSituacaoModelo(this.getSituacaoModelo().duplicate(bag));
			ms.setDescricao(this.getDescricao());
			ms.setId(this.getId());
			ms.setNome(this.getNome());
			Iterator<EstruturaClassificacao> it = this.getEstruturas()
					.iterator();
			while (it.hasNext()) {
				ms.addEstrutura(it.next().duplicate(bag));
			}
			Iterator<ModeloCaracteristicaServico> it2 = this
					.getModeloCaracteristicas().iterator();
			while (it2.hasNext()) {
				ms.addCaracteristica(it2.next().duplicate(bag));
			}
		}
		return (ModeloServico) bag.retrieve(this);

	}
	</meta>
  <meta attribute="implements" inherit="false">br.com.linkdata.entity.Duplicate<ModeloServico></meta>
  <meta attribute="extra-classe" inherit="false">
@DynaColumnsDomain(description = "Modelo de Serviço", column = "nome")
	</meta>
  <meta attribute="extra-import" inherit="false">java.io.ByteArrayOutputStream</meta>
  <meta attribute="extra-import" inherit="false">java.util.Iterator</meta>
  <meta attribute="extra-import" inherit="false">br.com.linkdata.dynacolumns.DynaColumnsDomain</meta>
  <meta attribute="extra-import" inherit="false">java.io.ObjectOutputStream</meta>
  <meta attribute="extra-import" inherit="false">java.io.ByteArrayInputStream</meta>
  <meta attribute="extra-import" inherit="false">java.io.ObjectInputStream</meta>
  <meta attribute="extra-import" inherit="false">java.util.LinkedHashSet</meta>
<column name="NM_MODELO" length="100" not-null="true" />
  </property>

    <many-to-one
	    name="situacao"
	    class="br.com.linkdata.entity.SimNao"
	    
        access="field"
        fetch="join"
    >
  <meta attribute="extends" inherit="false">br.com.linkdata.entity.Entity</meta>
  <meta attribute="class-code" inherit="false">
	public void addEstrutura(EstruturaClassificacao estrutura) {
		getEstruturas().add(estrutura);
	}

	public void removeEstrutura(EstruturaClassificacao estrutura) {
		getEstruturas().remove(estrutura);
	}

	public void addCaracteristica(ModeloCaracteristicaServico caracteristica) {
		if (modeloCaracteristicas == null) {
			modeloCaracteristicas = new LinkedHashSet<ModeloCaracteristicaServico>();
		}
		modeloCaracteristicas.add(caracteristica);
	}

	@Override
	public Object clone() {
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		ObjectOutputStream oos;
		Object deepCopy = null;
		try {
			oos = new ObjectOutputStream(baos);
			oos.writeUnshared(this);
			ByteArrayInputStream bais = new ByteArrayInputStream(baos
					.toByteArray());
			ObjectInputStream ois = new ObjectInputStream(bais);
			deepCopy = ois.readObject();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return deepCopy;
	}

	@Override
	public ModeloServico duplicate(DuplicateBag bag) {
		if (bag.fits(this)) {
			ModeloServico ms = new ModeloServico();
			bag.store(this, ms);
			ms.setSituacaoModelo(this.getSituacaoModelo().duplicate(bag));
			ms.setDescricao(this.getDescricao());
			ms.setId(this.getId());
			ms.setNome(this.getNome());
			Iterator<EstruturaClassificacao> it = this.getEstruturas()
					.iterator();
			while (it.hasNext()) {
				ms.addEstrutura(it.next().duplicate(bag));
			}
			Iterator<ModeloCaracteristicaServico> it2 = this
					.getModeloCaracteristicas().iterator();
			while (it2.hasNext()) {
				ms.addCaracteristica(it2.next().duplicate(bag));
			}
		}
		return (ModeloServico) bag.retrieve(this);

	}
	</meta>
  <meta attribute="implements" inherit="false">br.com.linkdata.entity.Duplicate<ModeloServico></meta>
  <meta attribute="extra-classe" inherit="false">
@DynaColumnsDomain(description = "Modelo de Serviço", column = "nome")
	</meta>
  <meta attribute="extra-import" inherit="false">java.io.ByteArrayOutputStream</meta>
  <meta attribute="extra-import" inherit="false">java.util.Iterator</meta>
  <meta attribute="extra-import" inherit="false">br.com.linkdata.dynacolumns.DynaColumnsDomain</meta>
  <meta attribute="extra-import" inherit="false">java.io.ObjectOutputStream</meta>
  <meta attribute="extra-import" inherit="false">java.io.ByteArrayInputStream</meta>
  <meta attribute="extra-import" inherit="false">java.io.ObjectInputStream</meta>
  <meta attribute="extra-import" inherit="false">java.util.LinkedHashSet</meta>
<column name="IND_ATIVO" />
   </many-to-one>
    <many-to-one
	    name="situacaoModelo"
	    class="br.com.linkdata.entity.SituacaoModelo"
	    
        access="field"
        fetch="join"
    >
  <meta attribute="extends" inherit="false">br.com.linkdata.entity.Entity</meta>
  <meta attribute="class-code" inherit="false">
	public void addEstrutura(EstruturaClassificacao estrutura) {
		getEstruturas().add(estrutura);
	}

	public void removeEstrutura(EstruturaClassificacao estrutura) {
		getEstruturas().remove(estrutura);
	}

	public void addCaracteristica(ModeloCaracteristicaServico caracteristica) {
		if (modeloCaracteristicas == null) {
			modeloCaracteristicas = new LinkedHashSet<ModeloCaracteristicaServico>();
		}
		modeloCaracteristicas.add(caracteristica);
	}

	@Override
	public Object clone() {
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		ObjectOutputStream oos;
		Object deepCopy = null;
		try {
			oos = new ObjectOutputStream(baos);
			oos.writeUnshared(this);
			ByteArrayInputStream bais = new ByteArrayInputStream(baos
					.toByteArray());
			ObjectInputStream ois = new ObjectInputStream(bais);
			deepCopy = ois.readObject();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return deepCopy;
	}

	@Override
	public ModeloServico duplicate(DuplicateBag bag) {
		if (bag.fits(this)) {
			ModeloServico ms = new ModeloServico();
			bag.store(this, ms);
			ms.setSituacaoModelo(this.getSituacaoModelo().duplicate(bag));
			ms.setDescricao(this.getDescricao());
			ms.setId(this.getId());
			ms.setNome(this.getNome());
			Iterator<EstruturaClassificacao> it = this.getEstruturas()
					.iterator();
			while (it.hasNext()) {
				ms.addEstrutura(it.next().duplicate(bag));
			}
			Iterator<ModeloCaracteristicaServico> it2 = this
					.getModeloCaracteristicas().iterator();
			while (it2.hasNext()) {
				ms.addCaracteristica(it2.next().duplicate(bag));
			}
		}
		return (ModeloServico) bag.retrieve(this);

	}
	</meta>
  <meta attribute="implements" inherit="false">br.com.linkdata.entity.Duplicate<ModeloServico></meta>
  <meta attribute="extra-classe" inherit="false">
@DynaColumnsDomain(description = "Modelo de Serviço", column = "nome")
	</meta>
  <meta attribute="extra-import" inherit="false">java.io.ByteArrayOutputStream</meta>
  <meta attribute="extra-import" inherit="false">java.util.Iterator</meta>
  <meta attribute="extra-import" inherit="false">br.com.linkdata.dynacolumns.DynaColumnsDomain</meta>
  <meta attribute="extra-import" inherit="false">java.io.ObjectOutputStream</meta>
  <meta attribute="extra-import" inherit="false">java.io.ByteArrayInputStream</meta>
  <meta attribute="extra-import" inherit="false">java.io.ObjectInputStream</meta>
  <meta attribute="extra-import" inherit="false">java.util.LinkedHashSet</meta>
<column name="ID_SIT_MODELO" />
   </many-to-one>

</class>

</hibernate-mapping>