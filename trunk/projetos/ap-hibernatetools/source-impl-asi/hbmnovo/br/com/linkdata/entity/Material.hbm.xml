<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC 
	"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
	"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<!-- Generated 19/01/2010 11:40:23 by Hibernate Tools 3.2.5.Beta -->
<hibernate-mapping>

<class
    name="br.com.linkdata.entity.Material"
    table="MATERIAL"
>
  <meta attribute="extends" inherit="false">br.com.linkdata.entity.Entity</meta>
  <meta attribute="class-code" inherit="false">
	public ImagemMaterial getImagemPadrao() {
		ImagemMaterial padrao = null;
		for (ImagemMaterial img : imagens) {
			if (img.getPadrao() == Boolean.TRUE) {
				padrao = img;
			}
		}
		return padrao;
	}	
	
	public void addUnidadeMedidaPossivelEntrada(UnidadeMedida unidadeMedidaEntrada){
		 UnidadeMedidaPossivelMaterial unidadeEntrada = new UnidadeMedidaPossivelMaterial(this, unidadeMedidaEntrada, Boolean.TRUE);
		 Set<UnidadeMedidaPossivelMaterial> colecao = getUnidadesPossiveisEntrada();
		 boolean empty = (colecao == null || colecao.isEmpty());
		 if (empty) {
			 unidadeEntrada.setPadrao(Boolean.TRUE);
		 }
		 getUnidadesPossiveisEntrada().add(unidadeEntrada);
	}
	
	public void addUnidadeMedidaPossivelSaida(UnidadeMedida unidadeMedidaSaida){
		UnidadeMedidaPossivelMaterial unidadeSaida = new UnidadeMedidaPossivelMaterial(this, unidadeMedidaSaida, Boolean.FALSE);
		Set<UnidadeMedidaPossivelMaterial> colecao = getUnidadesPossiveisSaida();
		boolean empty = (colecao == null || colecao.isEmpty());
		 if (empty) {
			 unidadeSaida.setPadrao(Boolean.TRUE);
		 }
		 getUnidadesPossiveisSaida().add(unidadeSaida);
	}
	
	public void removeUnidadeMedidaPossivelEntrada(UnidadeMedidaPossivelMaterial unidadeEntrada){
		 getUnidadesPossiveisEntrada().remove(unidadeEntrada);
	}
	
	public void removeUnidadeMedidaPossivelSaida(UnidadeMedidaPossivelMaterial unidadeSaida){
		 getUnidadesPossiveisSaida().remove(unidadeSaida);
	}
	</meta>
  <meta attribute="extra-classe" inherit="false">
@DynaColumnsDomain(column="nome")
	</meta>
  <meta attribute="extra-import" inherit="false">br.com.linkdata.dynacolumns.DynaColumnsDomain</meta>

	<id 
        name="id"
        type="java.lang.Long"
        access="field"
    >
  <meta attribute="extends" inherit="false">br.com.linkdata.entity.Entity</meta>
  <meta attribute="class-code" inherit="false">
	public ImagemMaterial getImagemPadrao() {
		ImagemMaterial padrao = null;
		for (ImagemMaterial img : imagens) {
			if (img.getPadrao() == Boolean.TRUE) {
				padrao = img;
			}
		}
		return padrao;
	}	
	
	public void addUnidadeMedidaPossivelEntrada(UnidadeMedida unidadeMedidaEntrada){
		 UnidadeMedidaPossivelMaterial unidadeEntrada = new UnidadeMedidaPossivelMaterial(this, unidadeMedidaEntrada, Boolean.TRUE);
		 Set<UnidadeMedidaPossivelMaterial> colecao = getUnidadesPossiveisEntrada();
		 boolean empty = (colecao == null || colecao.isEmpty());
		 if (empty) {
			 unidadeEntrada.setPadrao(Boolean.TRUE);
		 }
		 getUnidadesPossiveisEntrada().add(unidadeEntrada);
	}
	
	public void addUnidadeMedidaPossivelSaida(UnidadeMedida unidadeMedidaSaida){
		UnidadeMedidaPossivelMaterial unidadeSaida = new UnidadeMedidaPossivelMaterial(this, unidadeMedidaSaida, Boolean.FALSE);
		Set<UnidadeMedidaPossivelMaterial> colecao = getUnidadesPossiveisSaida();
		boolean empty = (colecao == null || colecao.isEmpty());
		 if (empty) {
			 unidadeSaida.setPadrao(Boolean.TRUE);
		 }
		 getUnidadesPossiveisSaida().add(unidadeSaida);
	}
	
	public void removeUnidadeMedidaPossivelEntrada(UnidadeMedidaPossivelMaterial unidadeEntrada){
		 getUnidadesPossiveisEntrada().remove(unidadeEntrada);
	}
	
	public void removeUnidadeMedidaPossivelSaida(UnidadeMedidaPossivelMaterial unidadeSaida){
		 getUnidadesPossiveisSaida().remove(unidadeSaida);
	}
	</meta>
  <meta attribute="extra-classe" inherit="false">
@DynaColumnsDomain(column="nome")
	</meta>
  <meta attribute="extra-import" inherit="false">br.com.linkdata.dynacolumns.DynaColumnsDomain</meta>
    
<column name="ID_MATERIAL" precision="12" scale="0" />
	    <generator class="sequence">
            <param name="max_lo">49</param>
            <param name="sequence">SQ_MATERIAL</param>
		</generator>
    </id>





	<set name="apelidos" 
	inverse="true"
	lazy="true" 
	table="APELIDO_MATERIAL"
        cascade="all"
	 fetch="select"
	>
  <meta attribute="extends" inherit="false">br.com.linkdata.entity.Entity</meta>
  <meta attribute="class-code" inherit="false">
	public ImagemMaterial getImagemPadrao() {
		ImagemMaterial padrao = null;
		for (ImagemMaterial img : imagens) {
			if (img.getPadrao() == Boolean.TRUE) {
				padrao = img;
			}
		}
		return padrao;
	}	
	
	public void addUnidadeMedidaPossivelEntrada(UnidadeMedida unidadeMedidaEntrada){
		 UnidadeMedidaPossivelMaterial unidadeEntrada = new UnidadeMedidaPossivelMaterial(this, unidadeMedidaEntrada, Boolean.TRUE);
		 Set<UnidadeMedidaPossivelMaterial> colecao = getUnidadesPossiveisEntrada();
		 boolean empty = (colecao == null || colecao.isEmpty());
		 if (empty) {
			 unidadeEntrada.setPadrao(Boolean.TRUE);
		 }
		 getUnidadesPossiveisEntrada().add(unidadeEntrada);
	}
	
	public void addUnidadeMedidaPossivelSaida(UnidadeMedida unidadeMedidaSaida){
		UnidadeMedidaPossivelMaterial unidadeSaida = new UnidadeMedidaPossivelMaterial(this, unidadeMedidaSaida, Boolean.FALSE);
		Set<UnidadeMedidaPossivelMaterial> colecao = getUnidadesPossiveisSaida();
		boolean empty = (colecao == null || colecao.isEmpty());
		 if (empty) {
			 unidadeSaida.setPadrao(Boolean.TRUE);
		 }
		 getUnidadesPossiveisSaida().add(unidadeSaida);
	}
	
	public void removeUnidadeMedidaPossivelEntrada(UnidadeMedidaPossivelMaterial unidadeEntrada){
		 getUnidadesPossiveisEntrada().remove(unidadeEntrada);
	}
	
	public void removeUnidadeMedidaPossivelSaida(UnidadeMedidaPossivelMaterial unidadeSaida){
		 getUnidadesPossiveisSaida().remove(unidadeSaida);
	}
	</meta>
  <meta attribute="extra-classe" inherit="false">
@DynaColumnsDomain(column="nome")
	</meta>
  <meta attribute="extra-import" inherit="false">br.com.linkdata.dynacolumns.DynaColumnsDomain</meta>
		<key
		> 
<column name="ID_MATERIAL" />
		</key>
<one-to-many class="br.com.linkdata.entity.ApelidoMaterial"
/>
	</set>

	<set name="caracteristicas" 
	inverse="true"
	lazy="true" 
	table="CARACTERISTICA_MATERIAL"
        cascade="all"
	 fetch="select"
	>
  <meta attribute="extends" inherit="false">br.com.linkdata.entity.Entity</meta>
  <meta attribute="class-code" inherit="false">
	public ImagemMaterial getImagemPadrao() {
		ImagemMaterial padrao = null;
		for (ImagemMaterial img : imagens) {
			if (img.getPadrao() == Boolean.TRUE) {
				padrao = img;
			}
		}
		return padrao;
	}	
	
	public void addUnidadeMedidaPossivelEntrada(UnidadeMedida unidadeMedidaEntrada){
		 UnidadeMedidaPossivelMaterial unidadeEntrada = new UnidadeMedidaPossivelMaterial(this, unidadeMedidaEntrada, Boolean.TRUE);
		 Set<UnidadeMedidaPossivelMaterial> colecao = getUnidadesPossiveisEntrada();
		 boolean empty = (colecao == null || colecao.isEmpty());
		 if (empty) {
			 unidadeEntrada.setPadrao(Boolean.TRUE);
		 }
		 getUnidadesPossiveisEntrada().add(unidadeEntrada);
	}
	
	public void addUnidadeMedidaPossivelSaida(UnidadeMedida unidadeMedidaSaida){
		UnidadeMedidaPossivelMaterial unidadeSaida = new UnidadeMedidaPossivelMaterial(this, unidadeMedidaSaida, Boolean.FALSE);
		Set<UnidadeMedidaPossivelMaterial> colecao = getUnidadesPossiveisSaida();
		boolean empty = (colecao == null || colecao.isEmpty());
		 if (empty) {
			 unidadeSaida.setPadrao(Boolean.TRUE);
		 }
		 getUnidadesPossiveisSaida().add(unidadeSaida);
	}
	
	public void removeUnidadeMedidaPossivelEntrada(UnidadeMedidaPossivelMaterial unidadeEntrada){
		 getUnidadesPossiveisEntrada().remove(unidadeEntrada);
	}
	
	public void removeUnidadeMedidaPossivelSaida(UnidadeMedidaPossivelMaterial unidadeSaida){
		 getUnidadesPossiveisSaida().remove(unidadeSaida);
	}
	</meta>
  <meta attribute="extra-classe" inherit="false">
@DynaColumnsDomain(column="nome")
	</meta>
  <meta attribute="extra-import" inherit="false">br.com.linkdata.dynacolumns.DynaColumnsDomain</meta>
		<key
		> 
<column name="ID_MATERIAL" />
		</key>
<one-to-many class="br.com.linkdata.entity.CaracteristicaMaterial"
/>
	</set>
    <property
        name="dataCadastro"
	    type="java.util.Date"
        access="field"
    >
  <meta attribute="extends" inherit="false">br.com.linkdata.entity.Entity</meta>
  <meta attribute="scope-field" inherit="false">protected</meta>
  <meta attribute="class-code" inherit="false">
	public ImagemMaterial getImagemPadrao() {
		ImagemMaterial padrao = null;
		for (ImagemMaterial img : imagens) {
			if (img.getPadrao() == Boolean.TRUE) {
				padrao = img;
			}
		}
		return padrao;
	}	
	
	public void addUnidadeMedidaPossivelEntrada(UnidadeMedida unidadeMedidaEntrada){
		 UnidadeMedidaPossivelMaterial unidadeEntrada = new UnidadeMedidaPossivelMaterial(this, unidadeMedidaEntrada, Boolean.TRUE);
		 Set<UnidadeMedidaPossivelMaterial> colecao = getUnidadesPossiveisEntrada();
		 boolean empty = (colecao == null || colecao.isEmpty());
		 if (empty) {
			 unidadeEntrada.setPadrao(Boolean.TRUE);
		 }
		 getUnidadesPossiveisEntrada().add(unidadeEntrada);
	}
	
	public void addUnidadeMedidaPossivelSaida(UnidadeMedida unidadeMedidaSaida){
		UnidadeMedidaPossivelMaterial unidadeSaida = new UnidadeMedidaPossivelMaterial(this, unidadeMedidaSaida, Boolean.FALSE);
		Set<UnidadeMedidaPossivelMaterial> colecao = getUnidadesPossiveisSaida();
		boolean empty = (colecao == null || colecao.isEmpty());
		 if (empty) {
			 unidadeSaida.setPadrao(Boolean.TRUE);
		 }
		 getUnidadesPossiveisSaida().add(unidadeSaida);
	}
	
	public void removeUnidadeMedidaPossivelEntrada(UnidadeMedidaPossivelMaterial unidadeEntrada){
		 getUnidadesPossiveisEntrada().remove(unidadeEntrada);
	}
	
	public void removeUnidadeMedidaPossivelSaida(UnidadeMedidaPossivelMaterial unidadeSaida){
		 getUnidadesPossiveisSaida().remove(unidadeSaida);
	}
	</meta>
  <meta attribute="extra-classe" inherit="false">
@DynaColumnsDomain(column="nome")
	</meta>
  <meta attribute="extra-import" inherit="false">br.com.linkdata.dynacolumns.DynaColumnsDomain</meta>
<column name="DT_CADASTRO" />
  </property>

    <property
        name="descricao"
	    type="java.lang.String"
        access="field"
    >
  <meta attribute="extends" inherit="false">br.com.linkdata.entity.Entity</meta>
  <meta attribute="class-code" inherit="false">
	public ImagemMaterial getImagemPadrao() {
		ImagemMaterial padrao = null;
		for (ImagemMaterial img : imagens) {
			if (img.getPadrao() == Boolean.TRUE) {
				padrao = img;
			}
		}
		return padrao;
	}	
	
	public void addUnidadeMedidaPossivelEntrada(UnidadeMedida unidadeMedidaEntrada){
		 UnidadeMedidaPossivelMaterial unidadeEntrada = new UnidadeMedidaPossivelMaterial(this, unidadeMedidaEntrada, Boolean.TRUE);
		 Set<UnidadeMedidaPossivelMaterial> colecao = getUnidadesPossiveisEntrada();
		 boolean empty = (colecao == null || colecao.isEmpty());
		 if (empty) {
			 unidadeEntrada.setPadrao(Boolean.TRUE);
		 }
		 getUnidadesPossiveisEntrada().add(unidadeEntrada);
	}
	
	public void addUnidadeMedidaPossivelSaida(UnidadeMedida unidadeMedidaSaida){
		UnidadeMedidaPossivelMaterial unidadeSaida = new UnidadeMedidaPossivelMaterial(this, unidadeMedidaSaida, Boolean.FALSE);
		Set<UnidadeMedidaPossivelMaterial> colecao = getUnidadesPossiveisSaida();
		boolean empty = (colecao == null || colecao.isEmpty());
		 if (empty) {
			 unidadeSaida.setPadrao(Boolean.TRUE);
		 }
		 getUnidadesPossiveisSaida().add(unidadeSaida);
	}
	
	public void removeUnidadeMedidaPossivelEntrada(UnidadeMedidaPossivelMaterial unidadeEntrada){
		 getUnidadesPossiveisEntrada().remove(unidadeEntrada);
	}
	
	public void removeUnidadeMedidaPossivelSaida(UnidadeMedidaPossivelMaterial unidadeSaida){
		 getUnidadesPossiveisSaida().remove(unidadeSaida);
	}
	</meta>
  <meta attribute="extra-classe" inherit="false">
@DynaColumnsDomain(column="nome")
	</meta>
  <meta attribute="extra-import" inherit="false">br.com.linkdata.dynacolumns.DynaColumnsDomain</meta>
<column name="DS_MODELO" />
  </property>


	<list name="imagens" inverse="true" table="IMAGEM_MATERIAL"
	lazy="true"
        cascade="all"
	 fetch="select">
  <meta attribute="extends" inherit="false">br.com.linkdata.entity.Entity</meta>
  <meta attribute="class-code" inherit="false">
	public ImagemMaterial getImagemPadrao() {
		ImagemMaterial padrao = null;
		for (ImagemMaterial img : imagens) {
			if (img.getPadrao() == Boolean.TRUE) {
				padrao = img;
			}
		}
		return padrao;
	}	
	
	public void addUnidadeMedidaPossivelEntrada(UnidadeMedida unidadeMedidaEntrada){
		 UnidadeMedidaPossivelMaterial unidadeEntrada = new UnidadeMedidaPossivelMaterial(this, unidadeMedidaEntrada, Boolean.TRUE);
		 Set<UnidadeMedidaPossivelMaterial> colecao = getUnidadesPossiveisEntrada();
		 boolean empty = (colecao == null || colecao.isEmpty());
		 if (empty) {
			 unidadeEntrada.setPadrao(Boolean.TRUE);
		 }
		 getUnidadesPossiveisEntrada().add(unidadeEntrada);
	}
	
	public void addUnidadeMedidaPossivelSaida(UnidadeMedida unidadeMedidaSaida){
		UnidadeMedidaPossivelMaterial unidadeSaida = new UnidadeMedidaPossivelMaterial(this, unidadeMedidaSaida, Boolean.FALSE);
		Set<UnidadeMedidaPossivelMaterial> colecao = getUnidadesPossiveisSaida();
		boolean empty = (colecao == null || colecao.isEmpty());
		 if (empty) {
			 unidadeSaida.setPadrao(Boolean.TRUE);
		 }
		 getUnidadesPossiveisSaida().add(unidadeSaida);
	}
	
	public void removeUnidadeMedidaPossivelEntrada(UnidadeMedidaPossivelMaterial unidadeEntrada){
		 getUnidadesPossiveisEntrada().remove(unidadeEntrada);
	}
	
	public void removeUnidadeMedidaPossivelSaida(UnidadeMedidaPossivelMaterial unidadeSaida){
		 getUnidadesPossiveisSaida().remove(unidadeSaida);
	}
	</meta>
  <meta attribute="extra-classe" inherit="false">
@DynaColumnsDomain(column="nome")
	</meta>
  <meta attribute="extra-import" inherit="false">br.com.linkdata.dynacolumns.DynaColumnsDomain</meta>
		<key
		> 
<column name="ID_MATERIAL" />
		</key>
    		<index 
    			column="NR_ORDEM"
			/>
<one-to-many class="br.com.linkdata.entity.ImagemMaterial"
/>
	</list>


    <many-to-one
	    name="modeloMaterial"
	    class="br.com.linkdata.entity.ModeloMaterial"
	    
        access="field"
        fetch="select"
    >
  <meta attribute="extends" inherit="false">br.com.linkdata.entity.Entity</meta>
  <meta attribute="class-code" inherit="false">
	public ImagemMaterial getImagemPadrao() {
		ImagemMaterial padrao = null;
		for (ImagemMaterial img : imagens) {
			if (img.getPadrao() == Boolean.TRUE) {
				padrao = img;
			}
		}
		return padrao;
	}	
	
	public void addUnidadeMedidaPossivelEntrada(UnidadeMedida unidadeMedidaEntrada){
		 UnidadeMedidaPossivelMaterial unidadeEntrada = new UnidadeMedidaPossivelMaterial(this, unidadeMedidaEntrada, Boolean.TRUE);
		 Set<UnidadeMedidaPossivelMaterial> colecao = getUnidadesPossiveisEntrada();
		 boolean empty = (colecao == null || colecao.isEmpty());
		 if (empty) {
			 unidadeEntrada.setPadrao(Boolean.TRUE);
		 }
		 getUnidadesPossiveisEntrada().add(unidadeEntrada);
	}
	
	public void addUnidadeMedidaPossivelSaida(UnidadeMedida unidadeMedidaSaida){
		UnidadeMedidaPossivelMaterial unidadeSaida = new UnidadeMedidaPossivelMaterial(this, unidadeMedidaSaida, Boolean.FALSE);
		Set<UnidadeMedidaPossivelMaterial> colecao = getUnidadesPossiveisSaida();
		boolean empty = (colecao == null || colecao.isEmpty());
		 if (empty) {
			 unidadeSaida.setPadrao(Boolean.TRUE);
		 }
		 getUnidadesPossiveisSaida().add(unidadeSaida);
	}
	
	public void removeUnidadeMedidaPossivelEntrada(UnidadeMedidaPossivelMaterial unidadeEntrada){
		 getUnidadesPossiveisEntrada().remove(unidadeEntrada);
	}
	
	public void removeUnidadeMedidaPossivelSaida(UnidadeMedidaPossivelMaterial unidadeSaida){
		 getUnidadesPossiveisSaida().remove(unidadeSaida);
	}
	</meta>
  <meta attribute="extra-classe" inherit="false">
@DynaColumnsDomain(column="nome")
	</meta>
  <meta attribute="extra-import" inherit="false">br.com.linkdata.dynacolumns.DynaColumnsDomain</meta>
<column name="ID_MODELO" />
   </many-to-one>
    <property
        name="nome"
	    type="java.lang.String"
        access="field"
    >
  <meta attribute="extends" inherit="false">br.com.linkdata.entity.Entity</meta>
  <meta attribute="class-code" inherit="false">
	public ImagemMaterial getImagemPadrao() {
		ImagemMaterial padrao = null;
		for (ImagemMaterial img : imagens) {
			if (img.getPadrao() == Boolean.TRUE) {
				padrao = img;
			}
		}
		return padrao;
	}	
	
	public void addUnidadeMedidaPossivelEntrada(UnidadeMedida unidadeMedidaEntrada){
		 UnidadeMedidaPossivelMaterial unidadeEntrada = new UnidadeMedidaPossivelMaterial(this, unidadeMedidaEntrada, Boolean.TRUE);
		 Set<UnidadeMedidaPossivelMaterial> colecao = getUnidadesPossiveisEntrada();
		 boolean empty = (colecao == null || colecao.isEmpty());
		 if (empty) {
			 unidadeEntrada.setPadrao(Boolean.TRUE);
		 }
		 getUnidadesPossiveisEntrada().add(unidadeEntrada);
	}
	
	public void addUnidadeMedidaPossivelSaida(UnidadeMedida unidadeMedidaSaida){
		UnidadeMedidaPossivelMaterial unidadeSaida = new UnidadeMedidaPossivelMaterial(this, unidadeMedidaSaida, Boolean.FALSE);
		Set<UnidadeMedidaPossivelMaterial> colecao = getUnidadesPossiveisSaida();
		boolean empty = (colecao == null || colecao.isEmpty());
		 if (empty) {
			 unidadeSaida.setPadrao(Boolean.TRUE);
		 }
		 getUnidadesPossiveisSaida().add(unidadeSaida);
	}
	
	public void removeUnidadeMedidaPossivelEntrada(UnidadeMedidaPossivelMaterial unidadeEntrada){
		 getUnidadesPossiveisEntrada().remove(unidadeEntrada);
	}
	
	public void removeUnidadeMedidaPossivelSaida(UnidadeMedidaPossivelMaterial unidadeSaida){
		 getUnidadesPossiveisSaida().remove(unidadeSaida);
	}
	</meta>
  <meta attribute="extra-classe" inherit="false">
@DynaColumnsDomain(column="nome")
	</meta>
  <meta attribute="extra-import" inherit="false">br.com.linkdata.dynacolumns.DynaColumnsDomain</meta>
<column name="NM_MODELO" length="100" not-null="true" />
  </property>

    <many-to-one
	    name="situacaoModelo"
	    class="br.com.linkdata.entity.SituacaoModelo"
	    
        access="field"
        fetch="select"
    >
  <meta attribute="extends" inherit="false">br.com.linkdata.entity.Entity</meta>
  <meta attribute="class-code" inherit="false">
	public ImagemMaterial getImagemPadrao() {
		ImagemMaterial padrao = null;
		for (ImagemMaterial img : imagens) {
			if (img.getPadrao() == Boolean.TRUE) {
				padrao = img;
			}
		}
		return padrao;
	}	
	
	public void addUnidadeMedidaPossivelEntrada(UnidadeMedida unidadeMedidaEntrada){
		 UnidadeMedidaPossivelMaterial unidadeEntrada = new UnidadeMedidaPossivelMaterial(this, unidadeMedidaEntrada, Boolean.TRUE);
		 Set<UnidadeMedidaPossivelMaterial> colecao = getUnidadesPossiveisEntrada();
		 boolean empty = (colecao == null || colecao.isEmpty());
		 if (empty) {
			 unidadeEntrada.setPadrao(Boolean.TRUE);
		 }
		 getUnidadesPossiveisEntrada().add(unidadeEntrada);
	}
	
	public void addUnidadeMedidaPossivelSaida(UnidadeMedida unidadeMedidaSaida){
		UnidadeMedidaPossivelMaterial unidadeSaida = new UnidadeMedidaPossivelMaterial(this, unidadeMedidaSaida, Boolean.FALSE);
		Set<UnidadeMedidaPossivelMaterial> colecao = getUnidadesPossiveisSaida();
		boolean empty = (colecao == null || colecao.isEmpty());
		 if (empty) {
			 unidadeSaida.setPadrao(Boolean.TRUE);
		 }
		 getUnidadesPossiveisSaida().add(unidadeSaida);
	}
	
	public void removeUnidadeMedidaPossivelEntrada(UnidadeMedidaPossivelMaterial unidadeEntrada){
		 getUnidadesPossiveisEntrada().remove(unidadeEntrada);
	}
	
	public void removeUnidadeMedidaPossivelSaida(UnidadeMedidaPossivelMaterial unidadeSaida){
		 getUnidadesPossiveisSaida().remove(unidadeSaida);
	}
	</meta>
  <meta attribute="extra-classe" inherit="false">
@DynaColumnsDomain(column="nome")
	</meta>
  <meta attribute="extra-import" inherit="false">br.com.linkdata.dynacolumns.DynaColumnsDomain</meta>
<column name="ID_SIT_MODELO" />
   </many-to-one>

	<set name="unidadesPossiveisEntrada" 
	inverse="true"
	lazy="true" 
	table="UNIDADE_POSSIVEL_MATERIAL"
	 fetch="select"
	>
  <meta attribute="extends" inherit="false">br.com.linkdata.entity.Entity</meta>
  <meta attribute="class-code" inherit="false">
	public ImagemMaterial getImagemPadrao() {
		ImagemMaterial padrao = null;
		for (ImagemMaterial img : imagens) {
			if (img.getPadrao() == Boolean.TRUE) {
				padrao = img;
			}
		}
		return padrao;
	}	
	
	public void addUnidadeMedidaPossivelEntrada(UnidadeMedida unidadeMedidaEntrada){
		 UnidadeMedidaPossivelMaterial unidadeEntrada = new UnidadeMedidaPossivelMaterial(this, unidadeMedidaEntrada, Boolean.TRUE);
		 Set<UnidadeMedidaPossivelMaterial> colecao = getUnidadesPossiveisEntrada();
		 boolean empty = (colecao == null || colecao.isEmpty());
		 if (empty) {
			 unidadeEntrada.setPadrao(Boolean.TRUE);
		 }
		 getUnidadesPossiveisEntrada().add(unidadeEntrada);
	}
	
	public void addUnidadeMedidaPossivelSaida(UnidadeMedida unidadeMedidaSaida){
		UnidadeMedidaPossivelMaterial unidadeSaida = new UnidadeMedidaPossivelMaterial(this, unidadeMedidaSaida, Boolean.FALSE);
		Set<UnidadeMedidaPossivelMaterial> colecao = getUnidadesPossiveisSaida();
		boolean empty = (colecao == null || colecao.isEmpty());
		 if (empty) {
			 unidadeSaida.setPadrao(Boolean.TRUE);
		 }
		 getUnidadesPossiveisSaida().add(unidadeSaida);
	}
	
	public void removeUnidadeMedidaPossivelEntrada(UnidadeMedidaPossivelMaterial unidadeEntrada){
		 getUnidadesPossiveisEntrada().remove(unidadeEntrada);
	}
	
	public void removeUnidadeMedidaPossivelSaida(UnidadeMedidaPossivelMaterial unidadeSaida){
		 getUnidadesPossiveisSaida().remove(unidadeSaida);
	}
	</meta>
  <meta attribute="extra-classe" inherit="false">
@DynaColumnsDomain(column="nome")
	</meta>
  <meta attribute="extra-import" inherit="false">br.com.linkdata.dynacolumns.DynaColumnsDomain</meta>
		<key
		> 
<column name="ID_MATERIAL" />
		</key>
<one-to-many class="br.com.linkdata.entity.UnidadeMedidaPossivelMaterial"
/>
	</set>

	<set name="unidadesPossiveisSaida" 
	inverse="true"
	lazy="true" 
	table="UNIDADE_POSSIVEL_MATERIAL"
	 fetch="select"
	>
  <meta attribute="extends" inherit="false">br.com.linkdata.entity.Entity</meta>
  <meta attribute="class-code" inherit="false">
	public ImagemMaterial getImagemPadrao() {
		ImagemMaterial padrao = null;
		for (ImagemMaterial img : imagens) {
			if (img.getPadrao() == Boolean.TRUE) {
				padrao = img;
			}
		}
		return padrao;
	}	
	
	public void addUnidadeMedidaPossivelEntrada(UnidadeMedida unidadeMedidaEntrada){
		 UnidadeMedidaPossivelMaterial unidadeEntrada = new UnidadeMedidaPossivelMaterial(this, unidadeMedidaEntrada, Boolean.TRUE);
		 Set<UnidadeMedidaPossivelMaterial> colecao = getUnidadesPossiveisEntrada();
		 boolean empty = (colecao == null || colecao.isEmpty());
		 if (empty) {
			 unidadeEntrada.setPadrao(Boolean.TRUE);
		 }
		 getUnidadesPossiveisEntrada().add(unidadeEntrada);
	}
	
	public void addUnidadeMedidaPossivelSaida(UnidadeMedida unidadeMedidaSaida){
		UnidadeMedidaPossivelMaterial unidadeSaida = new UnidadeMedidaPossivelMaterial(this, unidadeMedidaSaida, Boolean.FALSE);
		Set<UnidadeMedidaPossivelMaterial> colecao = getUnidadesPossiveisSaida();
		boolean empty = (colecao == null || colecao.isEmpty());
		 if (empty) {
			 unidadeSaida.setPadrao(Boolean.TRUE);
		 }
		 getUnidadesPossiveisSaida().add(unidadeSaida);
	}
	
	public void removeUnidadeMedidaPossivelEntrada(UnidadeMedidaPossivelMaterial unidadeEntrada){
		 getUnidadesPossiveisEntrada().remove(unidadeEntrada);
	}
	
	public void removeUnidadeMedidaPossivelSaida(UnidadeMedidaPossivelMaterial unidadeSaida){
		 getUnidadesPossiveisSaida().remove(unidadeSaida);
	}
	</meta>
  <meta attribute="extra-classe" inherit="false">
@DynaColumnsDomain(column="nome")
	</meta>
  <meta attribute="extra-import" inherit="false">br.com.linkdata.dynacolumns.DynaColumnsDomain</meta>
		<key
		> 
<column name="ID_MATERIAL" />
		</key>
<one-to-many class="br.com.linkdata.entity.UnidadeMedidaPossivelMaterial"
/>
	</set>

</class>

</hibernate-mapping>